sum(logs)
data <- data.frame(cbind(x,logs))
data %>% ggplot(aes(x=x,y=logs))+
geom_bar(stat = 'identity',fill='lightblue')+
geom_text(label = paste(round(logs*100,2),'%'))+
labs(x='Primer digito',y="probabilidades",title="Ley de Benford")+
theme_light()
### Punto 4. A
binomial = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
x= 3:15
prob=binom(x,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
plot(x,prob,type="h", col="red", lwd=3)
## Implemetacion con R,ya viene implementado
dbinom(0,10,0.08) ## p(X=x)
## Implemetacion con R,ya viene implementado
dbinom(3,15,0.4) ## p(X=x)
## P(>=) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##---------------------------------------------------------------------------
### Punto 5
## Distribucion de Poisson
dpois(3,0.93)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
## Implemetacion con R,ya viene implementado
dbinom(3,15,0.4) ## p(X=x)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##---------------------------------------------------------------------------
### Punto 5
## Distribucion de Poisson
dpois(3,0.93)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
## Implemetacion con R,ya viene implementado
dbinom(3,15,0.4) ## p(X=x)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##---------------------------------------------------------------------------
### Punto 5
## Distribucion de Poisson
dpois(3,0.93)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(lambda)*(lamda)^(x))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(lambda)*(lambda)^(x))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Distribucion de Poisson por default en R
dpois(3,0.93)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(lambda)*((lambda)^(x)))/factorial(x)
return(prob)
}
poisson(3,0.93)
factorial(3)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(-lambda)*((lambda)^(x)))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Distribucion de Poisson por default en R
dpois(3,0.93)
## Grafica
## Grafica
intervaloXPoisson= 0:5
prob=poisson(intervaloXPoisson,0.93)
plot(x,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 2:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
## Grafica
intervaloX= 2:10
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 2:10
prob=binom(intervaloX,15,0.4)
plot(intervaloX,prob,type="h", col="red", lwd=3)
## Grafica
intervaloX= 2:15
prob=binom(intervaloX,15,0.4)
plot(intervaloX,prob,type="h", col="red", lwd=3)
## Grafica
intervaloXPoisson= 0:5
prob=poisson(intervaloXPoisson,0.93)
plot(intervaloXPoisson,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 2:15
prob=binom(intervaloX,15,0.4)
plot(intervaloX,prob,type="h", col="red", lwd=3)
## Implemetacion con funcion predefinida de R
dbinom(3,15,0.4) ## p(X=x)
##Grafica
intervalo4c= 0:3
prob4c=binom(intervalo4c,15,0.4)
plot(intervalo4c,prob4c,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Implemetacion con funcion predefinida de R
dbinom(3,15,0.4) ## p(X=x)
## Grafica
intervalo4a= 2:15
prob=binom(intervalo4a,15,0.4)
plot(intervalo4a,prob,type="h", col="red", lwd=3)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Implemetacion con funcion predefinida de R
dbinom(3,15,0.4) ## p(X=x)
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##Grafica
intervalo4c= 0:3
prob4c=binom(intervalo4c,15,0.4)
plot(intervalo4c,prob4c,type="h", col="red", lwd=3)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##Grafica
intervalo4c= 0:2
prob4c=binom(intervalo4c,15,0.4)
plot(intervalo4c,prob4c,type="h", col="red", lwd=3)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(-lambda)*((lambda)^(x)))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Distribucion de Poisson por default en R
dpois(3,0.93)
## Grafica
intervaloXPoisson= 0:5
prob=poisson(intervaloXPoisson,0.93)
plot(intervaloXPoisson,prob,type="h", col="red", lwd=3)
# cargar paquetes
library(readr)
library(here)
setwd("D:/univalle/probabilidad/R/Probability_Statistics/RegresionLineal/Tarea")
# cargar paquetes
library(readr)
library(here)
# Importar csv
data <-read.csv("FIFA_2018_Statistics.csv")
#-------------------------------------------------------------------------
#Regresion Lineal Simple
#Para nuestro modelo lineal simple, tomamos:
#Posesion de balon (Ball.Poseesion) : x -> Variable independiente-regresora
#Oportunidades de gol (Atttemps) : y -> Variable dependiente-respuesta
# Modelo Lineal para la posesion de balon y las oportunidades de gol
modLinealSimple = lm(data$Attempts ~ data$Ball.Possession..)
modLinealSimple
summary(modLinealSimple)
summary(modLinealSimple)$r.square
summary(modLinealSimple)$sigma^2
#Grafica
plot(data$Ball.Possession..,data$Attempts,
main = "Possession vs Attemps",
xlab = "Posesión de Balón",
ylab = "Oportunidades de gol",
col = "blue")
abline(modLinealSimple,col='red')
#Errores residuales
error1 <- residuals(modLinealSimple)
hist(error1)
#-------------------------------------------------------------------------
#Regresion Lineal Simple 2
#Para nuestro modelo lineal simple, tomamos:
#Posesion de balon (Passes) : x -> Variable independiente-regresora
#Oportunidades de gol (Ball.Possession) : y -> Variable dependiente-respuesta
# Modelo Lineal para la posesion de balon y el número de pases exitosos
modLinealSimple2 = lm(data$Ball.Possession.. ~ data$Passes)
modLinealSimple2
summary(modLinealSimple2)
summary(modLinealSimple)
summary(modLinealSimple)$r.square
summary(modLinealSimple)$sigma^2
#Grafica
plot(data$Ball.Possession..,data$Attempts,
main = "Possession vs Attemps",
xlab = "Posesión de Balón",
ylab = "Oportunidades de gol",
col = "blue")
abline(modLinealSimple,col='red')
#Errores residuales
error1 <- residuals(modLinealSimple)
hist(error1)
#-------------------------------------------------------------------------
#Regresion Lineal Simple 2
#Para nuestro modelo lineal simple, tomamos:
#Posesion de balon (Passes) : x -> Variable independiente-regresora
#Oportunidades de gol (Ball.Possession) : y -> Variable dependiente-respuesta
# Modelo Lineal para la posesion de balon y el número de pases exitosos
modLinealSimple2 = lm(data$Ball.Possession.. ~ data$Passes)
modLinealSimple2
summary(modLinealSimple2)
summary(modLinealSimple2)$r.square
summary(modLinealSimple2)$sigma^2
#Graficas
plot(data$Passes,data$Ball.Possession..,
main = "Passes vs Possession",
xlab = "Número de pases exitosos",
ylab = "Posesión del balón",
col = "blue")
abline(modLinealSimple2,col='red')
#Errores residuales
error2 <- residuals(modLinealSimple2)
hist(error2)
modLinealMultiple = lm(data$Attempts ~ data$Ball.Possession..+data$Free.Kicks)
modLinealMultiple
#Graficos
plot(data$Ball.Possession..,data$Attempts,
main = "Ball Possession vs Attempts (Considering free kicks)",
xlab = "Posesión de balón",
ylab = "Oportunidades de Gol",
col = "blue")
abline(modLinealMultiple,col='red')
#Summary
summary(modLinealMultiple)
#Errores residuales
eMult <- residuals(modLinealMultiple)
hist(eMult)
plot(data$,data$Attempts,
main = "Ball Possession vs Attempts (Considering free kicks)",
xlab = "Posesión de balón",
ylab = "Oportunidades de Gol",
col = "blue")
plot(data$Goal.Scored,data$On.Target)
plot(data$On.Target, data$Goal.Scored)
plot(data$On.Target, data$Goal.Scored)
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$On.Target, data$Goal.Scored)
abline(modLinealMultiple,col='red')
plot(data$Off.Target, data$Goal.Scored)
plot(data$Off.Target, data$Goal.Scored)
plot(data$Blocked, data$Goal.Scored)
plot(data$Yellow...Red, data$Goal.Scored)
plot(data$Man.of.the.Match, data$Goal.Scored)
plot(data$Man.of.the.Match, data$Goal.Scored)
plot(data$Man.of.the.Match, data$Goal.Scored)
plot(data$X1st.Goal, data$Goal.Scored)
plot(data$X1st.Goal, data$Attempts)
plot(data$Attempts, data$X1st.Goal)
plot(data$Distance.Covered..Kms., data$Attempts)
plot(data$Distance.Covered..Kms., data$Passes)
plot(data$Distance.Covered..Kms., data$Own.goals)
plot(data$Goal.Scored, data$Own.goals)
plot(data$Own.goals, data$Goal.Scored)
plot(data$Distance.Covered..Kms., data$Goal.Scored)
plot(data$Distance.Covered..Kms., data$Goal.Scored)
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$Distance.Covered..Kms., data$Goal.Scored)
abline(modLinealMultiple,col='red')
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$Distance.Covered..Kms., data$Goal.Scored)
abline(modLinealMultiple,col='red')
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$Distance.Covered..Kms., data$Goal.Scored)
abline(modLinealMultiple,col='red')
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$Distance.Covered..Kms., data$Goal.Scored)
abline(modLinealtest,col='red')
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$Distance.Covered..Kms., data$Goal.Scored)
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$data$On.Target, data$Goal.Scored)
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
plot(data$On.Target, data$Goal.Scored)
abline(modLinealtest,col='red')
ggplot(data,aes(data$On.Target,data$Goal.Scored))+geom_point()+stat_smooth()
library(ggplot)
library(ggplot2)
ggplot(data,aes(data$On.Target,data$Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(data$Attempts,data$Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(data$On.Target,data$Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(data$On.Target,data$Goal.Scored))+geom_point()+stat_smooth()
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
#------------------
modLinealtest = lm(data$Goal.Scored ~ data$On.Target)
modLinealtest
summary(modLinealtest)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target)^2
+ I(data$On.Target)^3)
modelPolim
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target)^2
+ I(data$On.Target)^3)
modelPolim
summary(modelPolim)
summary(modLinealtest)
summary(modelPolim)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target)^2
+ I(data$On.Target)^3.data=data)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target^2)
+ I(data$On.Target^3))
modelPolim
summary(modelPolim)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target^2)
+ I(data$On.Target^3)
+ I(data$On.Target^4))
modelPolim
summary(modelPolim)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target^2)
+ I(data$On.Target^3)
)
modelPolim
summary(modelPolim)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target^2))
modelPolim
summary(modelPolim)
summary(modLinealtest)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ data$On.Target + I(data$On.Target^2).data=data)
#REgresion polinomica
modelPolim = lm(data$Goal.Scored ~ poly(data$On.Target.3.raw=TRUE))
modelPolim
summary(modelPolim)
ggplot(data,aes(data$Ball.Possession..,data$Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(data$On.Target,data$Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(Attempts,Goal.Scored))+geom_point()+stat_smooth()
View(data)
ggplot(data,aes(Passes,Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(Possesion,Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(Ball.Possesion..,Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(Ball.Possession..,Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(Distance.Covered..,Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(Distance.Covered..Kms.,Goal.Scored))+geom_point()+stat_smooth()
ggplot(data,aes(Distance.Covered..Kms.,Passes))+geom_point()+stat_smooth()
ggplot(data,aes(Distance.Covered..Kms.,Goal.Scored))+geom_point()+stat_smooth()
#REgresion polinomica
modelLineal3 = lm(data$Goal.Scored ~ data$Distance.Covered..Kms.)
modelPolim = lm(data$Goal.Scored ~ poly(data$Distance.Covered..Kms.,2,raw=TRUE))
modelLineal3
modelPolim
summary(modelLineal3)
summary(modelPolim)
modelPolim = lm(data$Goal.Scored ~ poly(data$Distance.Covered..Kms.,5,raw=TRUE))
summary(modelPolim)
#REgresion polinomica
modelLineal3 = lm(data$Goal.Scored ~ data$Distance.Covered..Kms.)
modelPolim = lm(data$Goal.Scored ~ poly(data$Distance.Covered..Kms.,10,raw=TRUE))
modelLineal3
modelPolim
summary(modelLineal3)
summary(modelPolim)
#REgresion polinomica
modelLineal3 = lm(data$Goal.Scored ~ data$Distance.Covered..Kms.)
modelPolim = lm(data$Goal.Scored ~ poly(data$Distance.Covered..Kms.,4,raw=TRUE))
modelLineal3
modelPolim
summary(modelLineal3)
summary(modelPolim)
#REgresion polinomica
modelLineal3 = lm(data$Goal.Scored ~ data$Distance.Covered..Kms.)
modelPolim = lm(data$Goal.Scored ~ poly(data$Distance.Covered..Kms.,6,raw=TRUE))
modelLineal3
modelPolim
summary(modelLineal3)
summary(modelPolim)
modelLineal4 = lm(data$Goal.Scored ~ log(data$Distance.Covered..Kms.))
modelPolim = lm(data$Goal.Scored ~ poly(data$Distance.Covered..Kms.,6,raw=TRUE))
modelLineal3
modelPolim
summary(modelLineal4)
summary(modelLineal3)
summary(modelPolim)
summary(modelLineal4)
summary(modelLineal3)
summary(modelPolim)
ggplot(data,aes(Distance.Covered..Kms.,Attemps))+geom_point()+stat_smooth()
ggplot(data,aes(Distance.Covered..Kms.,Attempts))+geom_point()+stat_smooth()
#REgresion polinomica
modelLineal3 = lm(data$Attempts ~ data$Distance.Covered..Kms.)
summary(modelLineal3)
modelPolim = lm(data$Attempts ~ poly(data$Distance.Covered..Kms.,6,raw=TRUE))
summary(modelPolim)
#REgresion polinomica
modelLineal3 = lm(data$Attempts ~ data$Distance.Covered..Kms.)
modelLineal4 = lm(data$Attempts ~ log(data$Distance.Covered..Kms.))
modelPolim = lm(data$Attempts ~ poly(data$Distance.Covered..Kms.,6,raw=TRUE))
modelLineal3
modelPolim
summary(modelLineal4)
summary(modelLineal3)
summary(modelPolim)
ggplot(data,aes(Distance.Covered..Kms.,Passes))+geom_point()+stat_smooth()
ggplot(data,aes(Passes,Distance.Covered..Kms.))+geom_point()+stat_smooth()
#REgresion polinomica
modelLineal3 = lm(data$Attempts ~ data$Distance.Covered..Kms.)
#REgresion polinomica
modelLineal3 = lm(data$Passes ~ data$Distance.Covered..Kms.)
modelLineal4 = lm(data$Passes ~ log(data$Distance.Covered..Kms.))
modelPolim = lm(data$Passes ~ poly(data$Distance.Covered..Kms.,6,raw=TRUE))
modelLineal3
modelPolim
summary(modelLineal4)
summary(modelLineal3)
summary(modelPolim)
modelPolim = lm(data$Passes ~ poly(data$Distance.Covered..Kms.,2,raw=TRUE))
summary(modelPolim)
modelPolim = lm(data$Passes ~ poly(data$Distance.Covered..Kms.,8,raw=TRUE))
summary(modelPolim)
modelPolim = lm(data$Passes ~ poly(data$Distance.Covered..Kms.,12,raw=TRUE))
summary(modelPolim)
modelPolim = lm(data$Passes ~ poly(data$Distance.Covered..Kms.,50,raw=TRUE))
summary(modelPolim)
summary(modelPolim)$r.square
