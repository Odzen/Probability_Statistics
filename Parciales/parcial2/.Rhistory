coin<-c('head', 'tail')
#Crear vector vacio donde guardare posteriormente los resultados de cada lanzamiento
valuesArray <- character()
#Crear vector vacio donde guardare los lanzamientos
flipsArray <- numeric()
#Crear vector vacio donde guardare posteriormente los resultados de cada calculo de frecuencia
relativeFrequencyVector<- vector()
acum<-0
oldFlip<-' '
relativeFreq<-0
n<-6
experimento <- function() {
for(numberFlip in 1:n){
flip  <- sample(coin,1)
if(!(strcmp(oldFlip, ' ')))
{
if(!(strcmp(flip, oldFlip))){
acum<-acum+1
}
}
oldFlip<- flip
}
relativeFreq<-acum/n
return(acum)
}
experimento()
#For donde recorro de 1 a 1000 y luego asigno valores a mi vectorFlips y mi relativeFrequencyVector
for(numberFlip in 1:100){
relativeFrequencyVector<-append(relativeFrequencyVector, experimento()/numberFlip)
flipsArray<-append(flipsArray,numberFlip)
}
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=flipsArray,y=relativeFrequencyVector,xlab = "Number of flips", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
coin<-c('head', 'tail')
#set.seed(546378)# Semilla para repoducibilidad, ya que es una operacion aleatoria
##---------------------------------------------
##VARIABLES Y CONSTANTES PARA EXPERIMENTO
##---------------------------------------------
acum<-0
oldFlip<-' '
n<-6
##---------------------------------------------
##FUNCION EXPERIMENTO QUE REPRESENTA EL PROBLEMA DADO DE PROBABILIDAD
## PROBABILIDAD DE QUE EN 6 LANZAMIENTOS DE UNA MONEDA, NO ME SALGAN 2 CARAS
## O 2 SELLOS SEGUIDOS
## Esta funcion simplemente ayuda a la simulacion, ya que devuelve el acum
## acum es la cantidad de veces que el experimento fue exitoso, lo podriamos llamar una Frecuencia absoluta
## void() -> return int = acum
##---------------------------------------------
experimento <- function() {
for(numberFlip in 1:n){
flip  <- sample(coin,1)
if(!(strcmp(oldFlip, ' '))) #Solo para la 1era repeticion, para que el acum no me cuente
{
if(!(strcmp(flip, oldFlip))){ #Compara el lanzamiento actual con el anterior
acum<-acum+1
}
}
oldFlip<- flip #Asigna el valor del lanzamiento anterior para el proximo ciclo
}
return(acum)
}
##Puede ser cualquier numero de repeticiones
numeroSimulaciones<-100
#Crear vector vacio donde guardare los lanzamientos
numSim <- numeric()
#Crear vector vacio donde guardare posteriormente los resultados de cada calculo de frecuencia
relativeFrequencyVector<- vector()
for(numberFlip in 1:numeroSimulaciones){
relativeFrequencyVector<-append(relativeFrequencyVector, experimento()/numberFlip)
numSim<-append(numSim,numberFlip)
}
##---------------------------------------------
##REPRESENTO TODO EN UN GRAFICO, CON EJE X= NUMERO DE SIMULACIONES
## Y EJE Y= LAS FRECUENCIAS RELATIVAS POR CADA SIMULACION
## Grafico demuestra que el valor se acerca a 0.03125 que es el valor dado por el enfoque clásico
##---------------------------------------------
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=numSim,y=relativeFrequencyVector,xlab = "Number of flips", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
##---------------------------------------------
##REPRESENTO TODO EN UN GRAFICO, CON EJE X= NUMERO DE SIMULACIONES
## Y EJE Y= LAS FRECUENCIAS RELATIVAS POR CADA SIMULACION
## Grafico demuestra que el valor se acerca a 0.03125 que es el valor dado por el enfoque clásico
##---------------------------------------------
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=numSim,y=relativeFrequencyVector,xlab = "Number of simulations", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
##Puede ser cualquier numero de repeticiones
numeroSimulaciones<-1000
#Crear vector vacio donde guardare los lanzamientos
numSim <- numeric()
#Crear vector vacio donde guardare posteriormente los resultados de cada calculo de frecuencia
relativeFrequencyVector<- vector()
for(numberFlip in 1:numeroSimulaciones){
relativeFrequencyVector<-append(relativeFrequencyVector, experimento()/numberFlip)
numSim<-append(numSim,numberFlip)
}
##---------------------------------------------
##REPRESENTO TODO EN UN GRAFICO, CON EJE X= NUMERO DE SIMULACIONES
## Y EJE Y= LAS FRECUENCIAS RELATIVAS POR CADA SIMULACION
## Grafico demuestra que el valor se acerca a 0.03125 que es el valor dado por el enfoque clásico
##---------------------------------------------
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=numSim,y=relativeFrequencyVector,xlab = "Number of simulations", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
##Puede ser cualquier numero de repeticiones
numeroSimulaciones<-10000
#Crear vector vacio donde guardare los lanzamientos
numSim <- numeric()
#Crear vector vacio donde guardare posteriormente los resultados de cada calculo de frecuencia
relativeFrequencyVector<- vector()
for(numberFlip in 1:numeroSimulaciones){
relativeFrequencyVector<-append(relativeFrequencyVector, experimento()/numberFlip)
numSim<-append(numSim,numberFlip)
}
##---------------------------------------------
##REPRESENTO TODO EN UN GRAFICO, CON EJE X= NUMERO DE SIMULACIONES
## Y EJE Y= LAS FRECUENCIAS RELATIVAS POR CADA SIMULACION
## Grafico demuestra que el valor se acerca a 0.03125 que es el valor dado por el enfoque clásico
##---------------------------------------------
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=numSim,y=relativeFrequencyVector,xlab = "Number of simulations", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
##Puede ser cualquier numero de repeticiones
numeroSimulaciones<-100000
#Crear vector vacio donde guardare los lanzamientos
numSim <- numeric()
#Crear vector vacio donde guardare posteriormente los resultados de cada calculo de frecuencia
relativeFrequencyVector<- vector()
for(numberFlip in 1:numeroSimulaciones){
relativeFrequencyVector<-append(relativeFrequencyVector, experimento()/numberFlip)
numSim<-append(numSim,numberFlip)
}
##---------------------------------------------
##REPRESENTO TODO EN UN GRAFICO, CON EJE X= NUMERO DE SIMULACIONES
## Y EJE Y= LAS FRECUENCIAS RELATIVAS POR CADA SIMULACION
## Grafico demuestra que el valor se acerca a 0.03125 que es el valor dado por el enfoque clásico
##---------------------------------------------
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=numSim,y=relativeFrequencyVector,xlab = "Number of simulations", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
coin<-c('head', 'tail')
#set.seed(546378)# Semilla para repoducibilidad, ya que es una operacion aleatoria
##---------------------------------------------
##VARIABLES Y CONSTANTES PARA EXPERIMENTO
##---------------------------------------------
acum<-0
oldFlip<-' '
n<-6
##---------------------------------------------
##FUNCION EXPERIMENTO QUE REPRESENTA EL PROBLEMA DADO DE PROBABILIDAD
## PROBABILIDAD DE QUE EN 6 LANZAMIENTOS DE UNA MONEDA, NO ME SALGAN 2 CARAS
## O 2 SELLOS SEGUIDOS
## Esta funcion simplemente ayuda a la simulacion, ya que devuelve el acum
## acum es la cantidad de veces que el experimento fue exitoso, lo podriamos llamar una Frecuencia absoluta
## void() -> return int = acum
##---------------------------------------------
experimento <- function() {
for(numberFlip in 1:n){
flip  <- sample(coin,1)
if(!(strcmp(oldFlip, ' '))) #Solo para la 1era repeticion, para que el acum no me cuente
{
if(!(strcmp(flip, oldFlip))){ #Compara el lanzamiento actual con el anterior
acum<-acum+1
}
}
oldFlip<- flip #Asigna el valor del lanzamiento anterior para el proximo ciclo
}
return(acum)
}
##Puede ser cualquier numero de repeticiones
numeroSimulaciones<-100000
#Crear vector vacio donde guardare los lanzamientos
numSim <- numeric()
#Crear vector vacio donde guardare posteriormente los resultados de cada calculo de frecuencia
relativeFrequencyVector<- vector()
for(numberFlip in 1:numeroSimulaciones){
relativeFrequencyVector<-append(relativeFrequencyVector, experimento()/numberFlip)
numSim<-append(numSim,numberFlip)
}
##---------------------------------------------
##REPRESENTO TODO EN UN GRAFICO, CON EJE X= NUMERO DE SIMULACIONES
## Y EJE Y= LAS FRECUENCIAS RELATIVAS POR CADA SIMULACION
## Grafico demuestra que el valor se acerca a 0.03125 que es el valor dado por el enfoque clásico
##---------------------------------------------
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=numSim,y=relativeFrequencyVector,xlab = "Number of simulations", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
coin<-c('head', 'tail')
#set.seed(546378)# Semilla para repoducibilidad, ya que es una operacion aleatoria
##---------------------------------------------
##VARIABLES Y CONSTANTES PARA EXPERIMENTO
##---------------------------------------------
acum<-0
oldFlip<-' '
n<-6
##---------------------------------------------
##FUNCION EXPERIMENTO QUE REPRESENTA EL PROBLEMA DADO DE PROBABILIDAD
## PROBABILIDAD DE QUE EN 6 LANZAMIENTOS DE UNA MONEDA, NO ME SALGAN 2 CARAS
## O 2 SELLOS SEGUIDOS
## Esta funcion simplemente ayuda a la simulacion, ya que devuelve el acum
## acum es la cantidad de veces que el experimento fue exitoso, lo podriamos llamar una Frecuencia absoluta
## void() -> return int = acum
##---------------------------------------------
experimento <- function() {
for(numberFlip in 1:n){
flip  <- sample(coin,1)
if(!(strcmp(oldFlip, ' '))) #Solo para la 1era repeticion, para que el acum no me cuente
{
if(!(strcmp(flip, oldFlip))){ #Compara el lanzamiento actual con el anterior
acum<-acum+1
}
}
oldFlip<- flip #Asigna el valor del lanzamiento anterior para el proximo ciclo
}
return(acum)
}
##Puede ser cualquier numero de repeticiones
numeroSimulaciones<-100
#Crear vector vacio donde guardare los lanzamientos
numSim <- numeric()
#Crear vector vacio donde guardare posteriormente los resultados de cada calculo de frecuencia
relativeFrequencyVector<- vector()
for(numberFlip in 1:numeroSimulaciones){
relativeFrequencyVector<-append(relativeFrequencyVector, experimento()/numberFlip)
numSim<-append(numSim,numberFlip)
}
##---------------------------------------------
##REPRESENTO TODO EN UN GRAFICO, CON EJE X= NUMERO DE SIMULACIONES
## Y EJE Y= LAS FRECUENCIAS RELATIVAS POR CADA SIMULACION
## Grafico demuestra que el valor se acerca a 0.03125 que es el valor dado por el enfoque clásico
##---------------------------------------------
#Representar todo con un grafico de dispersion para ver el comportamiento
plot(x=numSim,y=relativeFrequencyVector,xlab = "Number of simulations", ylab = "Relative frequency")
abline(h=0.03125,col="blue",lty=1)
## Ejercicio en clase
library(tidyverse)
x <- 1:9
logs<- log10((x+1)/x)
sum(logs)
data <- data.frame(cbind(x,logs))
data %>% ggplot(aes(x=x,y=logs))+
geom_bar(stat = 'identity',fill='lightblue')+
geom_text(label = paste(round(logs*100,2),'%'))+
labs(x='Primer digito',y="probabilidades",title="Ley de Benford")+
theme_light()
### Punto 4. A
binomial = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
x= 3:15
prob=binom(x,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
plot(x,prob,type="h", col="red", lwd=3)
## Implemetacion con R,ya viene implementado
dbinom(0,10,0.08) ## p(X=x)
## Implemetacion con R,ya viene implementado
dbinom(3,15,0.4) ## p(X=x)
## P(>=) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##---------------------------------------------------------------------------
### Punto 5
## Distribucion de Poisson
dpois(3,0.93)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
## Implemetacion con R,ya viene implementado
dbinom(3,15,0.4) ## p(X=x)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##---------------------------------------------------------------------------
### Punto 5
## Distribucion de Poisson
dpois(3,0.93)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
## Implemetacion con R,ya viene implementado
dbinom(3,15,0.4) ## p(X=x)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##---------------------------------------------------------------------------
### Punto 5
## Distribucion de Poisson
dpois(3,0.93)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(lambda)*(lamda)^(x))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(lambda)*(lambda)^(x))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Distribucion de Poisson por default en R
dpois(3,0.93)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(lambda)*((lambda)^(x)))/factorial(x)
return(prob)
}
poisson(3,0.93)
factorial(3)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(-lambda)*((lambda)^(x)))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Distribucion de Poisson por default en R
dpois(3,0.93)
## Grafica
## Grafica
intervaloXPoisson= 0:5
prob=poisson(intervaloXPoisson,0.93)
plot(x,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 3:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 2:15
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
## Grafica
intervaloX= 2:10
prob=binom(intervaloX,15,0.4)
plot(x,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 2:10
prob=binom(intervaloX,15,0.4)
plot(intervaloX,prob,type="h", col="red", lwd=3)
## Grafica
intervaloX= 2:15
prob=binom(intervaloX,15,0.4)
plot(intervaloX,prob,type="h", col="red", lwd=3)
## Grafica
intervaloXPoisson= 0:5
prob=poisson(intervaloXPoisson,0.93)
plot(intervaloXPoisson,prob,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Grafica
intervaloX= 2:15
prob=binom(intervaloX,15,0.4)
plot(intervaloX,prob,type="h", col="red", lwd=3)
## Implemetacion con funcion predefinida de R
dbinom(3,15,0.4) ## p(X=x)
##Grafica
intervalo4c= 0:3
prob4c=binom(intervalo4c,15,0.4)
plot(intervalo4c,prob4c,type="h", col="red", lwd=3)
binom = function(x,n,p){
prob=choose(n,x)*p^x*(1-p)^(n-x)
return(prob)
}
binom(3,15,0.4)
## Implemetacion con funcion predefinida de R
dbinom(3,15,0.4) ## p(X=x)
## Grafica
intervalo4a= 2:15
prob=binom(intervalo4a,15,0.4)
plot(intervalo4a,prob,type="h", col="red", lwd=3)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Implemetacion con funcion predefinida de R
dbinom(3,15,0.4) ## p(X=x)
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##Grafica
intervalo4c= 0:3
prob4c=binom(intervalo4c,15,0.4)
plot(intervalo4c,prob4c,type="h", col="red", lwd=3)
## P(x>=3) = 1 - P(x<3)
answer<- 1 - (binom(0,15,0.4)+ binom(1,15,0.4) + binom(2,15,0.4))
answer
## Otra forma usando funciones de R
pbinom(2,15,0.4,lower.tail=F) ## P(x>=3)
##Grafica
intervalo4c= 0:2
prob4c=binom(intervalo4c,15,0.4)
plot(intervalo4c,prob4c,type="h", col="red", lwd=3)
## Funcion poisson
poisson = function(x,lambda){
prob=(exp(-lambda)*((lambda)^(x)))/factorial(x)
return(prob)
}
poisson(3,0.93)
## Distribucion de Poisson por default en R
dpois(3,0.93)
## Grafica
intervaloXPoisson= 0:5
prob=poisson(intervaloXPoisson,0.93)
plot(intervaloXPoisson,prob,type="h", col="red", lwd=3)
setwd("D:/univalle/probabilidad/R/Probability_Statistics/Parciales/parcial2")
# Grafica de la distribucion normal
# Rejilla de valores para el eje X
x <- seq(10, 35, 1)
plot(x, dnorm(x, mean = 24, sd = 3.8), type = "o",
ylim = c(0, 0.125), lwd = 2,lty=3, col = "blue",
main = "Distribucion normal X∼N(24,3.8)",
xlab = "Valores para X",
ylab = "f(x)")
# Grafica de la distribucion normal
# Rejilla de valores para el eje X
x <- seq(10, 35, 1)
plot(x, dnorm(x, mean = 24, sd = 3.8), type = "o",
ylim = c(0, 0.125), lwd = 2,lty=3, col = "blue",
main = "Distribucion normal X∼N(24,3.8)",
xlab = "Valores para X",
ylab = "f(x)")
# 1/2 hora = 30 minutos
# Nos piden P(X > x) = P(X>30)
# media (μ) = 24
# Desviacion estandar (σ)= 3.8
# Funcion en R
# pnorm: Distribución normal (Función de distribución acumulada)
# lower.tail = FALSE porque estoy buscando valores mayores a 30 minutos
distr_acum1 = pnorm(30,mean = 24, sd = 3.8,lower.tail=FALSE)
distr_acum1
# Pasandolo a porcentaje
prob_procentaje1 = distr_acum1*100
prob_procentaje1
# Se calcula primero la Función de distribución acumulada
distr_acum2 = 1 - pnorm (15,24,3.8)
distr_acum2
# Pasandolo a porcentaje
prob_procentaje2 = distr_acum2*100
prob_procentaje2
# Se calcula primero la Función de distribución acumulada
distr_acum3 = 1 - pnorm (25,24,3.8)
distr_acum3
# Pasandolo a porcentaje
prob_procentaje3 = distr_acum3*100
prob_procentaje3
# Puesto que se quiere encontrar P(X<=x), ya que el procentaje es
# 15% entonces queremos encontrar el quantil 0.15
qnorm(0.15, 24, 3.8)
## RESPUESTA:
##-------------------------------------------------------------
